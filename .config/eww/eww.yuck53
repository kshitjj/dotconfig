;; Variables
(defvar time-visible false)

;; Polling Time
(defpoll time 
  :interval "1s"
  :initial "initial-value"
  :run-while time-visible
  `date +"%B %d %H:%M:%S"`)

;; Polling Workspace Information (using a custom script)
(defpoll workspaceLiteral
  :interval "1s"
  :initial "initial-value"
  `bash ~/.config/eww/scripts/workspace.sh`)  ;; Your custom workspace script

;; Polling System Information using separate scripts

(defpoll ram 
  :interval "5s" 
  `bash ~/.config/eww/scripts/get_ram.sh`)

(defpoll cpu 
  :interval "5s" 
  `bash ~/.config/eww/scripts/get_cpu.sh`)

(defpoll disk 
  :interval "5s" 
  `bash ~/.config/eww/scripts/get_disk.sh`)

(defpoll battery 
  :interval "5s" 
  `bash ~/.config/eww/scripts/get_battery.sh`)

(defpoll brightness 
  :interval "5s" 
  `bash ~/.config/eww/scripts/get_brightness.sh`)

;; Time Widget with Clickable Notification (in the center)
(defwidget time []
  (box
    :halign "center"
    :onclick "notify-send 'Current Time' `date`"  ;; Click to show a notification
    "${time}"))

;; bright
(defwidget bright []
  (eventbox 
    :onscroll "sudo /home/kshitij/.config/eww/scripts/updatebrightness.sh {}" 
    (image 
      :path "/home/kshitij/.config/eww/images/brightness.svg" 
      :image-height "40" 
      :image-width "40")))

;; battery
(defwidget battery []
  (circular-progress :value battery :thickness 5 
    (label :class "batteryText" :text "${battery}"))
)
;; ram
(defwidget ram []
  (label :text "${ram}")
)
;; disk
(defwidget disk []
  (label :text "${disk}")
)
;; cpu
(defwidget cpu []
  (circular-progress :value cpu :thickness 5 
    (label :class "cpuText" :text "${cpu}"))
)

(defwidget individualworkspaces [number focused]
  (box :class "workspaceContainer"
    :geometry (geometry :x "100px" :y "100px")
  number))
;; Workspace Widget (on the left)
(defwidget workspace []
  (box
    :halign "start"
    (literal :content workspaceLiteral)))

;; System Information Widget (on the right)
(defwidget system_info []
  (box
    :halign "end"
    :spacing "20"
    (cpu)
    (disk)
    (ram)
    (battery)
    (bright)))

;; Main Window Layout
(defwindow powermenu
  :monitor 0
  :geometry (geometry :x "0%" :y "0px" :width "100%" :height "3%" :anchor "top center")
  :stacking "fg"
  :exclusive true
  :reserve (struts :distance "40px" :side "top")
  :wm-ignore false
  :class "bar"
  (centerbox
    (workspace)    ;; Left - Workspace widget
    (time)         ;; Center - Time widget
    (system_info))) ;; Right - System info

;; Define a widget with inline styles
(defwidget test-box []
  (box 
    :halign "center" 
    :valign "center" 
    :style "background-color: rgba(30, 30, 46, 0.85); 
            color: white; 
            padding: 20px; 
            border-radius: 10px;" 
    "Hello World"))

;; Define a window with the widget
(defwindow test-window
  :monitor 0
  :geometry (geometry :x "0%" :y "0%" :width "300px" :height "100px" :anchor "top left")
  (test-box))
